# ### `Closure#argumentNames` **Public**
#
# Returns an [[Array]] of [[String]] objects representing the argument names
# expected by this closure.
defineInstanceMethod: 'argumentNames' as:
  get: 'argumentNames'

# ### `Closure#takesArguments?` **Public**
#
# Returns [[True]] or [[False]] depending on whether the block accepts any
# arguments.
defineInstanceMethod: 'takesArguments?' as:
  Ruby.createFromObject: (get: 'argumentNames')
  .send: 'any?'
  .truthy?

# ### `Closure#fileName` **Public**
#
# Returns the name of the file in which this Closure is defined.
defineInstanceMethod: 'fileName' as:
  Ruby.createFromObject: self
  .send: 'block'
  .send: 'source_location'
  .send: 'first'
  .toString

# ### `Closure#lineNumber` **Public**
#
# Returns the line of the file at which this Closure is defined.
defineInstanceMethod: 'lineNumber' as:
  Ruby.createFromObject: self
  .send: 'block'
  .send: 'source_location'
  .send: 'last'
  .toInteger


# ### `Closure#rescueFrom:with:` **Public**
#
# Registers a rescue handler for a given class of exception and
# calls the passed block if the exception is raised by this Closure's
# block.
#
# Arguments:
#   - `exceptionClass`: The (sub)class of [[Exception]] to rescue.
#   - `block`: A [[Closure]] containing code to run in the event of this
#              exception being raised.
def: 'rescueFrom:with:' as: |exceptionClass,block|
  rescues = get: 'rescues'
  rescues = rescues || {}
  rescues.at: exceptionClass set: block

  set: 'rescues' to: rescues

  rescues.keys.size

# ### `Closure#ensure:` **Public**
#
# Registers an ensure block which is always called after the [[Closure]]
# completes, regardless of whether an [[Exception]] is raised or not.
#
# Arguments:
#   - `block`: A [[Closure]].
def: 'ensure:' as: |block|
  ensures = get: 'ensures'
  ensures = ensures || []

  ensures.push: block

  set: 'ensures' to: ensures

  ensures.size
