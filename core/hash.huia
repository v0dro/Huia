# ## Methods defined by the Huia core library:

Integer = Huia.requireCore: 'integer'

# ### `Hash#keys` **Public**
#
# Returns an [[Array]] of keys in the hash.
def: 'keys' as:
  keys = Ruby.createFromObject: self
  .send: 'keys'
  .toArray

# ### `Hash#values` **Public**
#
# Returns an [[Array]] of values in the hash.
def: 'values' as:
  values = Ruby.createFromObject: self
  .send: 'values'
  .toArray

# ### `Hash#size` **Public**
#
# Returns the number of elements in the hash.
def: 'size' as:
  size = Ruby.createFromObject: self
  .send: 'size'
  .toInteger

# ### `Hash#withEach` **Public**
#
# Iterate over the hash, passing each key/value pair to the supplied block.
#
# Arguments:
#   - `block`: a [[Closure]] which accepts `key` and `value` as arguments.
def: 'withEach:' as: |block|
  Ruby.createFromObject: self
  .send: 'each' withBlock: block

  self

# ### `Hash#inspect` **Public**
#
# Returns a human readable [[String]] representation of the hash.
def: 'inspect' as:
  result = '{'

  last = self.size

  Ruby.createFromObject: self.keys
  .send: 'each_with_index' withBlock: |key,index|
    index = Integer.createFromValue: index
    index = index + 1
    value = self.at: key
    result.push: ' '
    result.push: key.inspect
    result.push: ' : '
    result.push: value.inspect

    if: (last == index) then:
      result.push: ' '

    if: (last != index) then:
      result.push: ','

  result.push: '}'
