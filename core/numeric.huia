# # `Numeric`
#
# Abstract base class for all numeric types ([[Integer]], [[Float]]).
#
# Inherits from [[Object]].
#
# ## Methods defined by the Huia core library:

klass = self
String = Huia.requireCore: 'string'

# ### `Numeric#plus:` **Public**
#
# Adds another numeric from this numeric.
#
# Arguments:
#   - `other`: the other numeric to add to self.
def: 'plus:' as: |other|
  other = Ruby.createFromObject: other
  .unwrap
  value = Ruby.createFromObject: self
  .send: '+' withArgs: [other]
  klass.createFromValue: value.unwrap

# ### `Numeric#minus:` **Public**
#
# Subtracts another numeric from this numeric.
#
# Arguments:
#   - `other`: the other numeric to subtract from self.
def: 'minus:' as: |other|
  other = Ruby.createFromObject: other
  .unwrap
  value = Ruby.createFromObject: self
  .send: '-' withArgs: [other]
  klass.createFromValue: value.unwrap

# ### `Numeric#multiplyBy:` **Public**
#
# Multiplies this numeric multiplied by another numeric.
#
# Arguments:
#   - `other`: the other numeric to multiply by.
def: 'multiplyBy:' as: |other|
  other = Ruby.createFromObject: other
  .unwrap
  value = Ruby.createFromObject: self
  .send: '*' withArgs: [other]
  klass.createFromValue: value.unwrap

# ### `Numeric#divideBy:` **Public**
#
# Divides this numeric by another numeric.
#
# Arguments:
#   - `other`: the other numeric to divide by.
def: 'divideBy:' as: |other|
  other = Ruby.createFromObject: other
  .unwrap
  value = Ruby.createFromObject: self
  .send: '/' withArgs: [other]
  klass.createFromValue: value.unwrap

# ### `Numeric#toThePowerOf:` **Public**
#
# Exponentiation. Equavalent to multiplying this numeric by itself N times.
#
# Arguments:
#   - `toThePowerOf:` the number of times to multiply by self.
def: 'toThePowerOf:' as: |other|
  other = Ruby.createFromObject: other
  .unwrap
  value = Ruby.createFromObject: self
  .send: '**' withArgs: [other]
  klass.createFromValue: value.unwrap

# ### `Numeric#moduloOf:` **Public**
#
# The remainder of dividing this numeric by another numeric.
#
# Arguments:
#   - `other`: the other numeric to divide by.
def: 'moduloOf:' as: |other|
  other = Ruby.createFromObject: other
  .unwrap
  value = Ruby.createFromObject: self
  .send: '%' withArgs: [other]
  klass.createFromValue: value.unwrap

# ### `Numeric#unaryPlus` **Public**
#
# Performs a unary plus on the numeric.
def: 'unaryPlus' as:
  value = Ruby.createFromObject: self
  .send: '+@'
  klass.createFromValue: value

# ### `Numeric#unaryMinus` **Public**
#
# Performs a unary minus on the numeric.
def: 'unaryMinus' as:
  value = Ruby.createFromObject: self
  .send: '-@'
  klass.createFromValue: value

# ### `Numeric#inspect` **Public**
#
# Returns a human readable [[String]] representation of the object.
def: 'inspect' as:
  self.toString

# ### `Numeric#toString` **Public**
#
# Returns a [[String]] representation of the object.
def: 'toString' as:
  str = Ruby.createFromObject: self
  .send: 'to_s'
  String.createFromValue: str

# ### `Numeric#isGreaterThan:` **Public**
#
# Tests to see if `self` is greater than `other`.
#
# Arguments:
#   - `other`: the value to test against.
def: 'isGreaterThan:' as: |other|
  other = Ruby.createFromObject: other
  .unwrap

  Ruby.createFromObject: self
  .send: '>' withArgs: [other]
  .toBoolean

# ### `Numeric#isLessThan:` **Public**
#
# Tests to see if `self` is less than `other`.
#
# Arguments:
#  - `other`: the value to test against.
def: 'isLessThan:' as: |other|
  other = Ruby.createFromObject: other
  .unwrap

  Ruby.createFromObject: self
  .send: '<' withArgs: [other]
  .toBoolean

# ### `Numeric#isGreaterOrEqualTo:` **Public**
#
# Tests to see if `self` is greater or equal to `other`.
#
# Arguments:
#   - `other`: the value to test against.
def: 'isGreaterOrEqualTo:' as: |other|
  other = Ruby.createFromObject: other
  .unwrap

  Ruby.createFromObject: self
  .send: '>=' withArgs: [other]
  .toBoolean

# ### `Numeric#isLessOrEqualTo:` **Public**
#
# Tests to see if `self` is less or equal to `other`.
#
# Arguments:
#   - `other`: the value to test against.
def: 'isLessOrEqualTo:' as: |other|
  other = Ruby.createFromObject: other
  .unwrap

  Ruby.createFromObject: self
  .send: '<=' withArgs: [other]
  .toBoolean
