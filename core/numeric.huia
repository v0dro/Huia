klass = self
String = Huia.requireCore: 'string'

def: 'plus:' as: |other|
  other = Ruby.createFromObject: other
  .unwrap
  value = Ruby.createFromObject: self
  .send: '+' withArgs: [other]
  klass.createFromValue: value.unwrap

def: 'minus:' as: |other|
  other = Ruby.createFromObject: other
  .unwrap
  value = Ruby.createFromObject: self
  .send: '-' withArgs: [other]
  klass.createFromValue: value.unwrap

def: 'multiplyBy:' as: |other|
  other = Ruby.createFromObject: other
  .unwrap
  value = Ruby.createFromObject: self
  .send: '*' withArgs: [other]
  klass.createFromValue: value.unwrap

def: 'divideBy:' as: |other|
  other = Ruby.createFromObject: other
  .unwrap
  value = Ruby.createFromObject: self
  .send: '/' withArgs: [other]
  klass.createFromValue: value.unwrap

def: 'toThePowerOf:' as: |other|
  other = Ruby.createFromObject: other
  .unwrap
  value = Ruby.createFromObject: self
  .send: '**' withArgs: [other]
  klass.createFromValue: value.unwrap

def: 'moduloOf:' as: |other|
  other = Ruby.createFromObject: other
  .unwrap
  value = Ruby.createFromObject: self
  .send: '%' withArgs: [other]
  klass.createFromValue: value.unwrap

def: 'unaryPlus' as:
  value = Ruby.createFromObject: self
  .send: '+@'
  klass.createFromValue: value

def: 'unaryMinus' as:
  value = Ruby.createFromObject: self
  .send: '-@'
  klass.createFromValue: value

def: 'inspect' as:
  self.toString

def: 'toString' as:
  str = Ruby.createFromObject: self
  .send: 'to_s'
  String.createFromValue: str
