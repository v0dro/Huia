#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Huia
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 175)

attr_accessor :lexer, :scopes, :state

def initialize lexer
  @lexer  = lexer
  @state  = []
  @scopes = []
  push_scope
end

def ast
  @ast ||= do_parse
  @scopes.first
end

def on_error t, val, vstack
  line = lexer.line
  col  = lexer.column
  message = "Unexpected #{token_to_str t} at #{lexer.filename} line #{line}:#{col}:\n\n"

  start = line - 5 > 0 ? line - 5 : 0
  i_size = line.to_s.size
  (start..(start + 5)).each do |i|
    message << sprintf("\t%#{i_size}d: %s\n", i, lexer.get_line(i))
    message << "\t#{' ' * i_size}  #{'-' * (col - 1)}^\n" if i == line
  end

  raise SyntaxError, message
end

def next_token
  nt = lexer.next_computed_token
  # just use a state stack for now, we'll have to do something
  # more sophisticated soon.
  if nt && nt.first == :state
    if nt.last
      state.push << nt.last
    else
      state.pop
    end
    next_token
  else
    nt
  end
end

def push_scope
  new_scope = Huia::AST::Scope.new scope
  new_scope.file   = lexer.filename
  new_scope.line   = lexer.line
  new_scope.column = lexer.column
  scopes.push new_scope
  new_scope
end

def pop_scope
  scopes.pop
end

def scope
  scopes.last
end

def binary left, right, method
  node(:MethodCall, left, node(:CallSignature, method, [right]))
end

def unary left, method
  node(:MethodCall, left, node(:CallSignature, method))
end

def node type, *args
  Huia::AST.const_get(type).new(*args).tap do |n|
    n.file   = lexer.filename
    n.line   = lexer.line
    n.column = lexer.column
  end
end
alias n node

def allocate_local name
  node(:Variable, name).tap do |n|
    scope.allocate_local n
  end
end

def allocate_local_assignment name, value
  node(:Assignment, name, value).tap do |n|
    scope.allocate_local n
  end
end

def scope_instance
  node(:ScopeInstance, scope)
end

def constant name
  return scope_instance if name == 'self'
  node(:Constant, name)
end

def to_string expr
  node(:MethodCall, expr, node(:CallSignature, 'toString'))
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    75,   125,    38,   139,    55,    56,    35,   137,   111,    65,
    66,    71,   162,   163,   123,    37,   148,    35,    35,     5,
     6,   138,   136,    67,    68,    69,    34,    34,    70,    28,
   122,    74,   121,   117,   150,    22,    23,   156,    26,    27,
   164,    54,    57,    19,    79,    80,    81,    82,    79,    80,
    81,    82,    83,    78,   166,   148,    83,    78,   170,     5,
     6,    78,    85,    81,    82,   122,    85,   153,   117,    83,
    85,   nil,   nil,   nil,    78,   nil,   nil,   nil,   nil,   nil,
    86,    87,    88,    85,    86,    87,    88,    84,    86,    87,
    88,    84,    79,    80,    81,    82,   nil,   nil,   nil,   nil,
    83,    86,    87,    88,    84,    78,   nil,    79,    80,    81,
    82,   140,   nil,   nil,    85,    83,   nil,   nil,   nil,   nil,
    78,   nil,   nil,    79,    80,    81,    82,   nil,   nil,    85,
   nil,    83,    86,    87,    88,    84,    78,   nil,   149,   nil,
   nil,   nil,   nil,   nil,   nil,    85,   nil,    86,    87,    88,
    84,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    79,
    80,    81,    82,    86,    87,    88,    84,    83,   nil,   nil,
   nil,   151,    78,   nil,    79,    80,    81,    82,   nil,   nil,
   nil,    85,    83,   nil,   nil,   nil,   nil,    78,   nil,   nil,
    79,    80,    81,    82,   nil,   nil,    85,   nil,    83,    86,
    87,    88,    84,    78,   nil,    79,    80,    81,    82,   nil,
   nil,   nil,    85,    83,    86,    87,    88,    84,    78,   nil,
   nil,    79,    80,    81,    82,   nil,   nil,    85,   nil,    83,
    86,    87,    88,    84,    78,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    85,   nil,    86,    87,    88,    84,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    79,    80,    81,
    82,    86,    87,    88,    84,    83,   nil,   144,   nil,   nil,
    78,   nil,     5,     6,    79,    80,    81,    82,    83,    85,
   nil,   nil,    83,    78,   nil,   nil,   nil,    78,   nil,   nil,
   nil,   nil,    85,   nil,   nil,   nil,    85,    86,    87,    88,
    84,   nil,   nil,   nil,   nil,    79,    80,    81,    82,   nil,
    86,    87,    88,    83,    86,    87,    88,    84,    78,   nil,
    79,    80,    81,    82,   nil,   nil,   nil,    85,    83,   nil,
   nil,   nil,   nil,    78,   nil,   165,    79,    80,    81,    82,
   nil,   nil,    85,   nil,    83,    86,    87,    88,    84,    78,
   nil,    79,    80,    81,    82,   nil,   nil,   nil,    85,    83,
    86,    87,    88,    84,    78,   nil,   nil,    83,   nil,   nil,
   nil,   nil,    78,    85,   nil,   nil,    86,    87,    88,    84,
   nil,    85,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    86,    87,    88,    84,    38,   nil,    55,    56,    86,
    87,    88,    65,    66,    71,   nil,   nil,   nil,    37,    83,
   nil,    35,     5,     6,    78,   nil,    67,    68,    69,   nil,
    34,    70,    28,    85,    74,   nil,   nil,   nil,    22,    23,
   nil,    26,    27,   nil,    54,    57,    19,    38,   nil,    55,
    56,    86,    87,    88,    65,    66,    71,   nil,   nil,   nil,
    37,    83,   nil,    35,   nil,   nil,    78,   nil,    67,    68,
    69,   nil,    34,    70,    28,    85,    74,   nil,   nil,   nil,
    22,    23,   nil,    26,    27,   nil,    54,    57,    19,    38,
   nil,    55,    56,    86,    87,    88,    65,    66,    71,   nil,
   nil,   nil,    37,    83,   nil,    35,   nil,   nil,    78,   nil,
    67,    68,    69,   nil,    34,    70,    28,    85,    74,   nil,
   nil,   nil,    22,    23,   nil,    26,    27,   nil,    54,    57,
    19,    38,   nil,    55,    56,    86,    87,    88,    65,    66,
    71,   nil,   nil,   nil,    37,   nil,   nil,    35,   nil,   nil,
   nil,   nil,    67,    68,    69,   nil,    34,    70,    28,   nil,
    74,   nil,   nil,   nil,    22,    23,   nil,    26,    27,   nil,
    54,    57,    19,    38,   nil,    55,    56,   nil,   nil,   nil,
    65,    66,    71,   nil,   102,   nil,    37,   nil,   nil,    35,
   nil,   nil,   101,   nil,    67,    68,    69,   nil,    34,    70,
    28,   nil,    74,   nil,   nil,   nil,    22,    23,   nil,    26,
    27,   nil,    54,    57,    19,    38,   nil,    55,    56,   nil,
   nil,   nil,    65,    66,    71,   nil,   nil,   nil,    37,   nil,
   nil,    35,   nil,   nil,   nil,   nil,    67,    68,    69,   nil,
    34,    70,    28,   nil,    74,   nil,   nil,   nil,    22,    23,
   nil,    26,    27,   nil,    54,    57,    19,    38,   nil,    55,
    56,   nil,   nil,   nil,    65,    66,    71,   nil,   nil,   nil,
    37,   nil,   nil,    35,   nil,   nil,   nil,   nil,    67,    68,
    69,   nil,    34,    70,    28,   nil,    74,   nil,   nil,   nil,
    22,    23,   nil,    26,    27,   nil,    54,    57,    19,    38,
   nil,    55,    56,   nil,   nil,   nil,    65,    66,    71,   nil,
   nil,   nil,    37,   nil,   nil,    35,   nil,   nil,   nil,   nil,
    67,    68,    69,   nil,    34,    70,    28,   nil,    74,   nil,
   nil,   nil,    22,    23,   nil,    26,    27,   nil,    54,    57,
    19,    38,   nil,    55,    56,   nil,   nil,   nil,    65,    66,
    71,   nil,   nil,   nil,    37,   nil,   nil,    35,   nil,   nil,
   nil,   nil,    67,    68,    69,   nil,    34,    70,    28,   nil,
    74,   nil,   nil,   nil,    22,    23,   nil,    26,    27,   nil,
    54,    57,    19,    38,   nil,    55,    56,   nil,   nil,   nil,
    65,    66,    71,   nil,   nil,   nil,    37,   nil,   nil,    35,
   nil,   nil,   nil,   nil,    67,    68,    69,   nil,    34,    70,
    28,   nil,    74,   nil,   nil,   nil,    22,    23,   nil,    26,
    27,   nil,    54,    57,    19,    38,   nil,    55,    56,   nil,
   nil,   nil,    65,    66,    71,   nil,   nil,   nil,    37,   nil,
   nil,    35,   nil,   nil,   nil,   nil,    67,    68,    69,   nil,
    34,    70,    28,   nil,    74,   nil,   nil,   nil,    22,    23,
   nil,    26,    27,   nil,    54,    57,    19,    38,   nil,    55,
    56,   nil,   nil,   nil,    65,    66,    71,   nil,   nil,   nil,
    37,   nil,   nil,    35,   nil,   nil,   nil,   nil,    67,    68,
    69,   nil,    34,    70,    28,   nil,    74,   nil,   nil,   nil,
    22,    23,   nil,    26,    27,   nil,    54,    57,    19,    38,
   nil,    55,    56,   nil,   nil,   nil,    65,    66,    71,   nil,
   nil,   nil,    37,   nil,   nil,    35,   nil,   nil,   nil,   nil,
    67,    68,    69,   nil,    34,    70,    28,   nil,    74,   nil,
   nil,   nil,    22,    23,   nil,    26,    27,   nil,    54,    57,
    19,    38,   nil,    55,    56,   nil,   nil,   nil,    65,    66,
    71,   nil,   nil,   nil,    37,   nil,   nil,    35,   nil,   nil,
   nil,   nil,    67,    68,    69,   nil,    34,    70,    28,   nil,
    74,   nil,   nil,   nil,    22,    23,   nil,    26,    27,   nil,
    54,    57,    19,    38,   nil,    55,    56,   nil,   nil,   nil,
    65,    66,    71,   nil,   nil,   nil,    37,   nil,   nil,    35,
   nil,   nil,   nil,   nil,    67,    68,    69,   nil,    34,    70,
    28,   nil,    74,   nil,   nil,   nil,    22,    23,   nil,    26,
    27,   nil,    54,    57,    19,    38,   nil,    55,    56,   nil,
   nil,   nil,    65,    66,    71,   nil,   nil,   nil,    37,   nil,
   nil,    35,   nil,   nil,   nil,   nil,    67,    68,    69,   nil,
    34,    70,    28,   nil,    74,   nil,   nil,   nil,    22,    23,
   nil,    26,    27,   nil,    54,    57,    19,    38,   nil,    55,
    56,   nil,   nil,   nil,    65,    66,    71,   nil,   nil,   nil,
    37,   nil,   nil,    35,   nil,   nil,   nil,   nil,    67,    68,
    69,   nil,    34,    70,    28,   nil,    74,   nil,   nil,   nil,
    22,    23,   nil,    26,    27,   nil,    54,    57,    19,    38,
   nil,    55,    56,   nil,   nil,   nil,    65,    66,    71,   nil,
   nil,   nil,    37,   nil,   nil,    35,   nil,   nil,   nil,   nil,
    67,    68,    69,   nil,    34,    70,    28,   nil,    74,   nil,
   nil,   nil,    22,    23,   nil,    26,    27,   nil,    54,    57,
    19,    38,   nil,    55,    56,   nil,   nil,   nil,    65,    66,
    71,   nil,   nil,   nil,    37,   nil,   nil,    35,   nil,   nil,
   nil,   nil,    67,    68,    69,   nil,    34,    70,    28,   nil,
    74,   nil,   nil,   nil,    22,    23,   nil,    26,    27,   nil,
    54,    57,    19,    38,   nil,    55,    56,   nil,   nil,   nil,
    65,    66,    71,   nil,   nil,   nil,    37,   nil,   nil,    35,
   nil,   nil,   nil,   nil,    67,    68,    69,   nil,    34,    70,
    28,   nil,    74,   nil,   nil,   nil,    22,    23,   nil,    26,
    27,   nil,    54,    57,    19,    38,   nil,    55,    56,   nil,
   nil,   nil,    65,    66,    71,   nil,   nil,   144,    37,   nil,
   nil,    35,     5,     6,   nil,   nil,    67,    68,    69,   nil,
    34,    70,    28,   nil,    74,   nil,   nil,   nil,    22,    23,
   nil,    26,    27,   nil,    54,    57,    19,    38,   nil,    55,
    56,    81,    82,   nil,    65,    66,    71,    83,   nil,   nil,
    37,   nil,    78,    35,   nil,   nil,   nil,   nil,    67,    68,
    69,    85,    34,    70,    28,   nil,    74,   nil,   nil,   nil,
    22,    23,   nil,    26,    27,   nil,    54,    57,    19,    86,
    87,    88,    84,    38,   nil,    55,    56,    81,    82,   nil,
    65,    66,    71,    83,   nil,   nil,    37,   nil,    78,    35,
   nil,   nil,   nil,   nil,    67,    68,    69,    85,    34,    70,
    28,   nil,    74,   nil,   nil,   nil,    22,    23,   nil,    26,
    27,   nil,    54,    57,    19,    86,    87,    88,    84,    81,
    82,   nil,   nil,   nil,   nil,    83,   nil,   nil,   nil,   nil,
    78,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    85,
    38,   nil,    55,    56,   nil,   nil,   nil,    65,    66,    71,
   nil,   nil,   nil,    37,   nil,   nil,    35,    86,    87,    88,
    84,    67,    68,    69,   nil,    34,    70,    28,   nil,    74,
   nil,   nil,   nil,    22,    23,   nil,    26,    27,   nil,    54,
    57,    19,    38,   nil,    55,    56,   nil,   nil,   nil,    65,
    66,    71,   nil,   nil,   nil,    37,   nil,   nil,    35,   nil,
   nil,   nil,   nil,    67,    68,    69,   nil,    34,    70,    28,
   nil,    74,   nil,   nil,   nil,    22,    23,   nil,    26,    27,
   nil,    54,    57,    19,    38,   nil,    55,    56,   nil,   nil,
   nil,    65,    66,    71,   nil,   nil,   nil,    37,   nil,   nil,
    35,   nil,   nil,   nil,   nil,    67,    68,    69,   nil,    34,
    70,    28,   nil,    74,   nil,   nil,   nil,    22,    23,   nil,
    26,    27,   nil,    54,    57,    19,    38,   nil,    55,    56,
   nil,   nil,   nil,    65,    66,    71,   nil,   nil,   144,    37,
   nil,   nil,    35,     5,     6,   nil,   nil,    67,    68,    69,
   nil,    34,    70,    28,   nil,    74,   nil,   nil,   nil,    22,
    23,   nil,    26,    27,   nil,    54,    57,    19,    38,   nil,
    55,    56,   nil,   nil,   nil,    65,    66,    71,   nil,   nil,
   nil,    37,   nil,   nil,    35,   nil,   nil,   nil,   nil,    67,
    68,    69,   nil,    34,    70,    28,   nil,    74,   nil,   nil,
   nil,    22,    23,   nil,    26,    27,   nil,    54,    57,    19 ]

racc_action_check = [
     1,    78,     1,    92,     1,     1,    32,    90,    38,     1,
     1,     1,   145,   145,    75,     1,   100,    78,     1,     1,
     1,    92,    90,     1,     1,     1,    78,     1,     1,     1,
    74,     1,    74,    74,   109,     1,     1,   119,     1,     1,
   147,     1,     1,     1,     3,     3,     3,     3,    89,    89,
    89,    89,     3,   130,   162,   163,    89,     3,   167,     3,
     3,    89,   130,   113,   113,   116,     3,   116,   116,   113,
    89,   nil,   nil,   nil,   113,   nil,   nil,   nil,   nil,   nil,
   130,   130,   130,   113,     3,     3,     3,     3,    89,    89,
    89,    89,    91,    91,    91,    91,   nil,   nil,   nil,   nil,
    91,   113,   113,   113,   113,    91,   nil,    94,    94,    94,
    94,    94,   nil,   nil,    91,    94,   nil,   nil,   nil,   nil,
    94,   nil,   nil,   105,   105,   105,   105,   nil,   nil,    94,
   nil,   105,    91,    91,    91,    91,   105,   nil,   105,   nil,
   nil,   nil,   nil,   nil,   nil,   105,   nil,    94,    94,    94,
    94,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   110,
   110,   110,   110,   105,   105,   105,   105,   110,   nil,   nil,
   nil,   110,   110,   nil,   132,   132,   132,   132,   nil,   nil,
   nil,   110,   132,   nil,   nil,   nil,   nil,   132,   nil,   nil,
   133,   133,   133,   133,   nil,   nil,   132,   nil,   133,   110,
   110,   110,   110,   133,   nil,   134,   134,   134,   134,   nil,
   nil,   nil,   133,   134,   132,   132,   132,   132,   134,   nil,
   nil,   135,   135,   135,   135,   nil,   nil,   134,   nil,   135,
   133,   133,   133,   133,   135,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   135,   nil,   134,   134,   134,   134,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   142,   142,   142,
   142,   135,   135,   135,   135,   142,   nil,   142,   nil,   nil,
   142,   nil,   142,   142,   152,   152,   152,   152,   112,   142,
   nil,   nil,   152,   112,   nil,   nil,   nil,   152,   nil,   nil,
   nil,   nil,   112,   nil,   nil,   nil,   152,   142,   142,   142,
   142,   nil,   nil,   nil,   nil,   155,   155,   155,   155,   nil,
   112,   112,   112,   155,   152,   152,   152,   152,   155,   nil,
   157,   157,   157,   157,   nil,   nil,   nil,   155,   157,   nil,
   nil,   nil,   nil,   157,   nil,   155,   159,   159,   159,   159,
   nil,   nil,   157,   nil,   159,   155,   155,   155,   155,   159,
   nil,   169,   169,   169,   169,   nil,   nil,   nil,   159,   169,
   157,   157,   157,   157,   169,   nil,   nil,   115,   nil,   nil,
   nil,   nil,   115,   169,   nil,   nil,   159,   159,   159,   159,
   nil,   115,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   169,   169,   169,   169,     0,   nil,     0,     0,   115,
   115,   115,     0,     0,     0,   nil,   nil,   nil,     0,   128,
   nil,     0,     0,     0,   128,   nil,     0,     0,     0,   nil,
     0,     0,     0,   128,     0,   nil,   nil,   nil,     0,     0,
   nil,     0,     0,   nil,     0,     0,     0,    19,   nil,    19,
    19,   128,   128,   128,    19,    19,    19,   nil,   nil,   nil,
    19,   129,   nil,    19,   nil,   nil,   129,   nil,    19,    19,
    19,   nil,    19,    19,    19,   129,    19,   nil,   nil,   nil,
    19,    19,   nil,    19,    19,   nil,    19,    19,    19,    23,
   nil,    23,    23,   129,   129,   129,    23,    23,    23,   nil,
   nil,   nil,    23,   131,   nil,    23,   nil,   nil,   131,   nil,
    23,    23,    23,   nil,    23,    23,    23,   131,    23,   nil,
   nil,   nil,    23,    23,   nil,    23,    23,   nil,    23,    23,
    23,    27,   nil,    27,    27,   131,   131,   131,    27,    27,
    27,   nil,   nil,   nil,    27,   nil,   nil,    27,   nil,   nil,
   nil,   nil,    27,    27,    27,   nil,    27,    27,    27,   nil,
    27,   nil,   nil,   nil,    27,    27,   nil,    27,    27,   nil,
    27,    27,    27,    35,   nil,    35,    35,   nil,   nil,   nil,
    35,    35,    35,   nil,    35,   nil,    35,   nil,   nil,    35,
   nil,   nil,    35,   nil,    35,    35,    35,   nil,    35,    35,
    35,   nil,    35,   nil,   nil,   nil,    35,    35,   nil,    35,
    35,   nil,    35,    35,    35,    37,   nil,    37,    37,   nil,
   nil,   nil,    37,    37,    37,   nil,   nil,   nil,    37,   nil,
   nil,    37,   nil,   nil,   nil,   nil,    37,    37,    37,   nil,
    37,    37,    37,   nil,    37,   nil,   nil,   nil,    37,    37,
   nil,    37,    37,   nil,    37,    37,    37,    54,   nil,    54,
    54,   nil,   nil,   nil,    54,    54,    54,   nil,   nil,   nil,
    54,   nil,   nil,    54,   nil,   nil,   nil,   nil,    54,    54,
    54,   nil,    54,    54,    54,   nil,    54,   nil,   nil,   nil,
    54,    54,   nil,    54,    54,   nil,    54,    54,    54,    55,
   nil,    55,    55,   nil,   nil,   nil,    55,    55,    55,   nil,
   nil,   nil,    55,   nil,   nil,    55,   nil,   nil,   nil,   nil,
    55,    55,    55,   nil,    55,    55,    55,   nil,    55,   nil,
   nil,   nil,    55,    55,   nil,    55,    55,   nil,    55,    55,
    55,    56,   nil,    56,    56,   nil,   nil,   nil,    56,    56,
    56,   nil,   nil,   nil,    56,   nil,   nil,    56,   nil,   nil,
   nil,   nil,    56,    56,    56,   nil,    56,    56,    56,   nil,
    56,   nil,   nil,   nil,    56,    56,   nil,    56,    56,   nil,
    56,    56,    56,    57,   nil,    57,    57,   nil,   nil,   nil,
    57,    57,    57,   nil,   nil,   nil,    57,   nil,   nil,    57,
   nil,   nil,   nil,   nil,    57,    57,    57,   nil,    57,    57,
    57,   nil,    57,   nil,   nil,   nil,    57,    57,   nil,    57,
    57,   nil,    57,    57,    57,    79,   nil,    79,    79,   nil,
   nil,   nil,    79,    79,    79,   nil,   nil,   nil,    79,   nil,
   nil,    79,   nil,   nil,   nil,   nil,    79,    79,    79,   nil,
    79,    79,    79,   nil,    79,   nil,   nil,   nil,    79,    79,
   nil,    79,    79,   nil,    79,    79,    79,    80,   nil,    80,
    80,   nil,   nil,   nil,    80,    80,    80,   nil,   nil,   nil,
    80,   nil,   nil,    80,   nil,   nil,   nil,   nil,    80,    80,
    80,   nil,    80,    80,    80,   nil,    80,   nil,   nil,   nil,
    80,    80,   nil,    80,    80,   nil,    80,    80,    80,    81,
   nil,    81,    81,   nil,   nil,   nil,    81,    81,    81,   nil,
   nil,   nil,    81,   nil,   nil,    81,   nil,   nil,   nil,   nil,
    81,    81,    81,   nil,    81,    81,    81,   nil,    81,   nil,
   nil,   nil,    81,    81,   nil,    81,    81,   nil,    81,    81,
    81,    82,   nil,    82,    82,   nil,   nil,   nil,    82,    82,
    82,   nil,   nil,   nil,    82,   nil,   nil,    82,   nil,   nil,
   nil,   nil,    82,    82,    82,   nil,    82,    82,    82,   nil,
    82,   nil,   nil,   nil,    82,    82,   nil,    82,    82,   nil,
    82,    82,    82,    83,   nil,    83,    83,   nil,   nil,   nil,
    83,    83,    83,   nil,   nil,   nil,    83,   nil,   nil,    83,
   nil,   nil,   nil,   nil,    83,    83,    83,   nil,    83,    83,
    83,   nil,    83,   nil,   nil,   nil,    83,    83,   nil,    83,
    83,   nil,    83,    83,    83,    84,   nil,    84,    84,   nil,
   nil,   nil,    84,    84,    84,   nil,   nil,   nil,    84,   nil,
   nil,    84,   nil,   nil,   nil,   nil,    84,    84,    84,   nil,
    84,    84,    84,   nil,    84,   nil,   nil,   nil,    84,    84,
   nil,    84,    84,   nil,    84,    84,    84,    85,   nil,    85,
    85,   nil,   nil,   nil,    85,    85,    85,   nil,   nil,   nil,
    85,   nil,   nil,    85,   nil,   nil,   nil,   nil,    85,    85,
    85,   nil,    85,    85,    85,   nil,    85,   nil,   nil,   nil,
    85,    85,   nil,    85,    85,   nil,    85,    85,    85,    86,
   nil,    86,    86,   nil,   nil,   nil,    86,    86,    86,   nil,
   nil,   nil,    86,   nil,   nil,    86,   nil,   nil,   nil,   nil,
    86,    86,    86,   nil,    86,    86,    86,   nil,    86,   nil,
   nil,   nil,    86,    86,   nil,    86,    86,   nil,    86,    86,
    86,    87,   nil,    87,    87,   nil,   nil,   nil,    87,    87,
    87,   nil,   nil,   nil,    87,   nil,   nil,    87,   nil,   nil,
   nil,   nil,    87,    87,    87,   nil,    87,    87,    87,   nil,
    87,   nil,   nil,   nil,    87,    87,   nil,    87,    87,   nil,
    87,    87,    87,    88,   nil,    88,    88,   nil,   nil,   nil,
    88,    88,    88,   nil,   nil,   nil,    88,   nil,   nil,    88,
   nil,   nil,   nil,   nil,    88,    88,    88,   nil,    88,    88,
    88,   nil,    88,   nil,   nil,   nil,    88,    88,   nil,    88,
    88,   nil,    88,    88,    88,    99,   nil,    99,    99,   nil,
   nil,   nil,    99,    99,    99,   nil,   nil,    99,    99,   nil,
   nil,    99,    99,    99,   nil,   nil,    99,    99,    99,   nil,
    99,    99,    99,   nil,    99,   nil,   nil,   nil,    99,    99,
   nil,    99,    99,   nil,    99,    99,    99,   111,   nil,   111,
   111,   114,   114,   nil,   111,   111,   111,   114,   nil,   nil,
   111,   nil,   114,   111,   nil,   nil,   nil,   nil,   111,   111,
   111,   114,   111,   111,   111,   nil,   111,   nil,   nil,   nil,
   111,   111,   nil,   111,   111,   nil,   111,   111,   111,   114,
   114,   114,   114,   117,   nil,   117,   117,   126,   126,   nil,
   117,   117,   117,   126,   nil,   nil,   117,   nil,   126,   117,
   nil,   nil,   nil,   nil,   117,   117,   117,   126,   117,   117,
   117,   nil,   117,   nil,   nil,   nil,   117,   117,   nil,   117,
   117,   nil,   117,   117,   117,   126,   126,   126,   126,   127,
   127,   nil,   nil,   nil,   nil,   127,   nil,   nil,   nil,   nil,
   127,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   127,
   137,   nil,   137,   137,   nil,   nil,   nil,   137,   137,   137,
   nil,   nil,   nil,   137,   nil,   nil,   137,   127,   127,   127,
   127,   137,   137,   137,   nil,   137,   137,   137,   nil,   137,
   nil,   nil,   nil,   137,   137,   nil,   137,   137,   nil,   137,
   137,   137,   139,   nil,   139,   139,   nil,   nil,   nil,   139,
   139,   139,   nil,   nil,   nil,   139,   nil,   nil,   139,   nil,
   nil,   nil,   nil,   139,   139,   139,   nil,   139,   139,   139,
   nil,   139,   nil,   nil,   nil,   139,   139,   nil,   139,   139,
   nil,   139,   139,   139,   140,   nil,   140,   140,   nil,   nil,
   nil,   140,   140,   140,   nil,   nil,   nil,   140,   nil,   nil,
   140,   nil,   nil,   nil,   nil,   140,   140,   140,   nil,   140,
   140,   140,   nil,   140,   nil,   nil,   nil,   140,   140,   nil,
   140,   140,   nil,   140,   140,   140,   141,   nil,   141,   141,
   nil,   nil,   nil,   141,   141,   141,   nil,   nil,   141,   141,
   nil,   nil,   141,   141,   141,   nil,   nil,   141,   141,   141,
   nil,   141,   141,   141,   nil,   141,   nil,   nil,   nil,   141,
   141,   nil,   141,   141,   nil,   141,   141,   141,   164,   nil,
   164,   164,   nil,   nil,   nil,   164,   164,   164,   nil,   nil,
   nil,   164,   nil,   nil,   164,   nil,   nil,   nil,   nil,   164,
   164,   164,   nil,   164,   164,   164,   nil,   164,   nil,   nil,
   nil,   164,   164,   nil,   164,   164,   nil,   164,   164,   164 ]

racc_action_pointer = [
   393,     0,   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   435,
   nil,   nil,   nil,   477,   nil,   nil,   nil,   519,   nil,   nil,
   nil,   nil,   -12,   nil,   nil,   561,   nil,   603,     5,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   645,   687,   729,   771,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     0,    14,   nil,   nil,    -1,   813,
   855,   897,   939,   981,  1023,  1065,  1107,  1149,  1191,    44,
   -15,    88,   -19,   nil,   103,   nil,   nil,   nil,   nil,  1233,
    14,   nil,   nil,   nil,   nil,   119,   nil,   nil,   nil,    15,
   155,  1275,   266,    57,  1275,   355,    35,  1321,   nil,     7,
   nil,   nil,   nil,   nil,   nil,   nil,  1321,  1363,   397,   439,
    36,   481,   170,   186,   201,   217,   nil,  1388,   nil,  1430,
  1472,  1514,   253,   nil,   nil,    -9,   nil,    37,   nil,   nil,
   nil,   nil,   270,   nil,   nil,   301,   nil,   316,   nil,   332,
   nil,   nil,    35,    53,  1556,   nil,   nil,    45,   nil,   347,
   nil ]

racc_action_default = [
  -129,  -129,    -1,    -4,    -5,    -6,    -7,   -10,   -11,   -12,
   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,   -21,   -23,
   -24,   -25,   -26,  -129,   -30,   -31,   -32,  -129,   -37,   -55,
   -56,   -59,   -60,   -61,   -62,  -129,   -70,  -129,   -73,   -74,
   -75,   -76,   -77,   -78,   -79,   -80,   -81,   -82,   -83,   -84,
   -96,   -97,   -98,   -99,  -129,  -129,  -129,  -129,  -104,  -105,
  -106,  -107,  -108,  -109,  -110,  -111,  -112,  -113,  -114,  -115,
  -116,  -117,  -118,  -119,  -129,  -129,    -2,    -3,  -129,  -129,
  -129,  -129,  -129,  -129,  -129,  -129,  -129,  -129,  -129,   -22,
  -129,   -28,  -129,   -34,  -129,   -71,   -38,   -39,   -40,  -129,
  -129,   -46,   -47,   -48,   -49,   -66,   -63,   -64,   -65,   -68,
  -129,  -129,  -100,  -101,  -102,  -103,  -129,  -129,  -122,  -124,
  -125,  -126,  -127,   171,   -57,   -58,   -86,   -87,   -88,   -89,
   -90,   -91,   -92,   -93,   -94,   -95,   -27,  -129,   -33,  -129,
  -129,  -129,    -4,   -43,   -44,  -129,   -50,   -52,   -54,   -67,
   -69,   -72,   -85,  -120,  -123,  -129,  -128,   -29,   -35,   -36,
   -41,   -42,    -9,  -129,  -129,  -121,    -8,  -129,   -51,   -53,
   -45 ]

racc_goto_table = [
    89,    76,    93,    77,    91,     1,   143,   146,    94,   118,
   167,    90,    92,   109,    96,    97,   105,    98,   110,    99,
   103,   100,   145,   104,   124,    95,   106,   107,   108,   116,
   nil,   nil,   nil,   nil,   nil,   112,   113,   114,   115,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   160,   161,
   nil,   154,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   168,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   142,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   152,   nil,   nil,   nil,   nil,   nil,   155,   nil,
   nil,   nil,   nil,   nil,   141,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   158,   nil,   nil,   nil,   157,   nil,
    94,   159,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    76,    77,   nil,   nil,   169 ]

racc_goto_check = [
     3,     2,    24,     4,     3,     1,    30,    35,     3,    72,
     5,    20,    23,    25,    26,    27,     3,    28,     3,    29,
    31,    32,    33,    34,    39,    42,    43,    44,    45,    70,
   nil,   nil,   nil,   nil,   nil,     3,     3,     3,     3,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    30,    30,
   nil,    72,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
    35,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     3,   nil,   nil,   nil,   nil,   nil,     3,   nil,
   nil,   nil,   nil,   nil,     1,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    24,   nil,   nil,   nil,     3,   nil,
     3,     3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,     4,   nil,   nil,     3 ]

racc_goto_pointer = [
   nil,     5,     0,   -19,     0,  -152,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   -12,   nil,   nil,   -15,   -25,   -22,   -21,   -20,   -18,   -16,
   -93,   -15,   -14,   -78,   -12,   -93,   nil,   nil,   nil,   -54,
   nil,   nil,    -7,    -9,    -8,    -7,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   -45,   nil,   -65,   nil ]

racc_goto_default = [
   nil,   nil,     2,     3,     4,   nil,     7,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    20,    21,
   nil,    24,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   147,    29,    30,    31,
    32,    33,    36,   nil,   nil,   nil,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    58,    59,    60,    61,    62,    63,    64,    72,    73,
   nil,   120,   nil,   119 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 49, :_reduce_none,
  2, 49, :_reduce_2,
  2, 50, :_reduce_3,
  1, 50, :_reduce_4,
  1, 50, :_reduce_5,
  1, 52, :_reduce_none,
  1, 52, :_reduce_none,
  1, 53, :_reduce_none,
  0, 53, :_reduce_none,
  1, 51, :_reduce_none,
  1, 51, :_reduce_none,
  1, 51, :_reduce_none,
  1, 51, :_reduce_none,
  1, 51, :_reduce_none,
  1, 51, :_reduce_none,
  1, 51, :_reduce_none,
  1, 51, :_reduce_none,
  1, 51, :_reduce_none,
  1, 51, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  2, 64, :_reduce_22,
  1, 65, :_reduce_23,
  1, 61, :_reduce_none,
  1, 61, :_reduce_none,
  1, 66, :_reduce_26,
  3, 67, :_reduce_27,
  1, 68, :_reduce_28,
  3, 68, :_reduce_29,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 69, :_reduce_32,
  3, 70, :_reduce_33,
  1, 71, :_reduce_34,
  3, 71, :_reduce_35,
  3, 72, :_reduce_36,
  1, 59, :_reduce_37,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  3, 74, :_reduce_41,
  3, 75, :_reduce_42,
  2, 76, :_reduce_43,
  1, 78, :_reduce_44,
  5, 79, :_reduce_45,
  1, 80, :_reduce_46,
  1, 82, :_reduce_47,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 81, :_reduce_none,
  3, 81, :_reduce_none,
  1, 83, :_reduce_52,
  3, 83, :_reduce_53,
  1, 84, :_reduce_54,
  1, 58, :_reduce_none,
  1, 58, :_reduce_none,
  3, 85, :_reduce_57,
  3, 85, :_reduce_58,
  1, 86, :_reduce_59,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 89, :_reduce_62,
  2, 90, :_reduce_63,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 92, :_reduce_none,
  2, 92, :_reduce_none,
  1, 93, :_reduce_none,
  2, 93, :_reduce_none,
  1, 88, :_reduce_70,
  2, 88, :_reduce_71,
  3, 55, :_reduce_72,
  1, 60, :_reduce_73,
  1, 56, :_reduce_none,
  1, 56, :_reduce_none,
  1, 56, :_reduce_none,
  1, 56, :_reduce_none,
  1, 56, :_reduce_none,
  1, 56, :_reduce_none,
  1, 56, :_reduce_none,
  1, 56, :_reduce_none,
  1, 56, :_reduce_none,
  1, 56, :_reduce_none,
  1, 56, :_reduce_none,
  3, 94, :_reduce_85,
  3, 95, :_reduce_86,
  3, 96, :_reduce_87,
  3, 97, :_reduce_88,
  3, 98, :_reduce_89,
  3, 99, :_reduce_90,
  3, 100, :_reduce_91,
  3, 101, :_reduce_92,
  3, 102, :_reduce_93,
  3, 103, :_reduce_94,
  3, 104, :_reduce_95,
  1, 57, :_reduce_none,
  1, 57, :_reduce_none,
  1, 57, :_reduce_none,
  1, 57, :_reduce_none,
  2, 105, :_reduce_100,
  2, 106, :_reduce_101,
  2, 107, :_reduce_102,
  2, 108, :_reduce_103,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 110, :_reduce_111,
  1, 109, :_reduce_112,
  1, 112, :_reduce_113,
  1, 113, :_reduce_114,
  1, 114, :_reduce_115,
  1, 115, :_reduce_116,
  1, 111, :_reduce_117,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  3, 116, :_reduce_120,
  3, 119, :_reduce_121,
  1, 118, :_reduce_122,
  2, 118, :_reduce_123,
  1, 120, :_reduce_124,
  1, 120, :_reduce_125,
  2, 117, :_reduce_126,
  1, 121, :_reduce_127,
  2, 121, :_reduce_128 ]

racc_reduce_n = 129

racc_shift_n = 171

racc_token_table = {
  false => 0,
  :error => 1,
  :IDENTIFIER => 2,
  :EQUAL => 3,
  :PLUS => 4,
  :MINUS => 5,
  :ASTERISK => 6,
  :FWD_SLASH => 7,
  :COLON => 8,
  :FLOAT => 9,
  :INTEGER => 10,
  :STRING => 11,
  :EXPO => 12,
  :INDENT => 13,
  :OUTDENT => 14,
  :OPAREN => 15,
  :CPAREN => 16,
  :DOT => 17,
  :SIGNATURE => 18,
  :NL => 19,
  :EOF => 20,
  :PIPE => 21,
  :COMMA => 22,
  :NIL => 23,
  :TRUE => 24,
  :FALSE => 25,
  :EQUALITY => 26,
  :CALL => 27,
  :SELF => 28,
  :CONSTANT => 29,
  :CHAR => 30,
  :DOUBLE_TICK_STRING => 31,
  :DOUBLE_TICK_STRING_END => 32,
  :INTERPOLATE_START => 33,
  :INTERPOLATE_END => 34,
  :BOX => 35,
  :LSQUARE => 36,
  :RSQUARE => 37,
  :FACES => 38,
  :LFACE => 39,
  :RFACE => 40,
  :BANG => 41,
  :TILDE => 42,
  :RETURN => 43,
  :NOT_EQUALITY => 44,
  :OR => 45,
  :AND => 46,
  :PERCENT => 47 }

racc_nt_base = 48

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IDENTIFIER",
  "EQUAL",
  "PLUS",
  "MINUS",
  "ASTERISK",
  "FWD_SLASH",
  "COLON",
  "FLOAT",
  "INTEGER",
  "STRING",
  "EXPO",
  "INDENT",
  "OUTDENT",
  "OPAREN",
  "CPAREN",
  "DOT",
  "SIGNATURE",
  "NL",
  "EOF",
  "PIPE",
  "COMMA",
  "NIL",
  "TRUE",
  "FALSE",
  "EQUALITY",
  "CALL",
  "SELF",
  "CONSTANT",
  "CHAR",
  "DOUBLE_TICK_STRING",
  "DOUBLE_TICK_STRING_END",
  "INTERPOLATE_START",
  "INTERPOLATE_END",
  "BOX",
  "LSQUARE",
  "RSQUARE",
  "FACES",
  "LFACE",
  "RFACE",
  "BANG",
  "TILDE",
  "RETURN",
  "NOT_EQUALITY",
  "OR",
  "AND",
  "PERCENT",
  "$start",
  "statements",
  "statement",
  "expr",
  "eol",
  "nlq",
  "literal",
  "grouped_expr",
  "binary_op",
  "unary_op",
  "method_call",
  "constant",
  "variable",
  "array",
  "hash",
  "return",
  "return_expr",
  "return_nil",
  "empty_array",
  "array_list",
  "array_items",
  "empty_hash",
  "hash_list",
  "hash_items",
  "hash_item",
  "indented",
  "indented_w_stmts",
  "indented_w_expr",
  "indented_wo_stmts",
  "indent",
  "outdent",
  "indent_w_args",
  "indent_pipe",
  "indent_args",
  "indent_wo_args",
  "indent_arg",
  "arg_var",
  "method_call_on_object",
  "method_call_on_self",
  "call_signature",
  "call_arguments",
  "call_simple_name",
  "call_argument",
  "call_passed_arg",
  "call_passed_simple",
  "call_passed_indented",
  "assignment",
  "addition",
  "subtraction",
  "multiplication",
  "division",
  "exponentiation",
  "modulo",
  "equality",
  "not_equality",
  "logical_or",
  "logical_and",
  "unary_not",
  "unary_plus",
  "unary_minus",
  "unary_complement",
  "integer",
  "float",
  "string",
  "nil",
  "true",
  "false",
  "self",
  "interpolated_string",
  "empty_string",
  "interpolated_string_contents",
  "interpolation",
  "interpolated_string_chunk",
  "chars" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.racc', 20)
  def _reduce_2(val, _values, result)
     return scope 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 22)
  def _reduce_3(val, _values, result)
     return scope.append val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 23)
  def _reduce_4(val, _values, result)
     return scope.append val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 24)
  def _reduce_5(val, _values, result)
     return scope 
    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

module_eval(<<'.,.,', 'parser.racc', 42)
  def _reduce_22(val, _values, result)
     return n(:Return, val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 43)
  def _reduce_23(val, _values, result)
     return n(:Return, n(:Nil)) 
    result
  end
.,.,

# reduce 24 omitted

# reduce 25 omitted

module_eval(<<'.,.,', 'parser.racc', 48)
  def _reduce_26(val, _values, result)
     return n :Array 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_27(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_28(val, _values, result)
     return n :Array, [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_29(val, _values, result)
     val[0].append(val[2]); return val[0] 
    result
  end
.,.,

# reduce 30 omitted

# reduce 31 omitted

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_32(val, _values, result)
     return n :Hash 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_33(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_34(val, _values, result)
     return n :Hash, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_35(val, _values, result)
     val[0].append(val[2]); return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_36(val, _values, result)
     return n :HashItem, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_37(val, _values, result)
     return constant val[0] 
    result
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_41(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_42(val, _values, result)
     return val[0].append(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_43(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_44(val, _values, result)
     return pop_scope 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_45(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 74)
  def _reduce_46(val, _values, result)
     return push_scope 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 75)
  def _reduce_47(val, _values, result)
     return push_scope 
    result
  end
.,.,

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_52(val, _values, result)
     return scope.add_argument val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_53(val, _values, result)
     return n :Assignment, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_54(val, _values, result)
     return n :Variable, val[0] 
    result
  end
.,.,

# reduce 55 omitted

# reduce 56 omitted

module_eval(<<'.,.,', 'parser.racc', 87)
  def _reduce_57(val, _values, result)
     return n :MethodCall, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_58(val, _values, result)
     return n :MethodCall, val[0], n(:CallSignature, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_59(val, _values, result)
     return n :MethodCall, scope_instance, val[0] 
    result
  end
.,.,

# reduce 60 omitted

# reduce 61 omitted

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_62(val, _values, result)
     return n :CallSignature, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_63(val, _values, result)
     return n :CallSignature, val[0], [val[1]] 
    result
  end
.,.,

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.racc', 101)
  def _reduce_70(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 102)
  def _reduce_71(val, _values, result)
     return val[0].concat_signature val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_72(val, _values, result)
     return n :Expression, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_73(val, _values, result)
     return allocate_local val[0] 
    result
  end
.,.,

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_85(val, _values, result)
     return allocate_local_assignment val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_86(val, _values, result)
     return binary val[0], val[2], 'plus:' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_87(val, _values, result)
     return binary val[0], val[2], 'minus:' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 123)
  def _reduce_88(val, _values, result)
     return binary val[0], val[2], 'multiplyBy:' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_89(val, _values, result)
     return binary val[0], val[2], 'divideBy:' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_90(val, _values, result)
     return binary val[0], val[2], 'toThePowerOf:' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 126)
  def _reduce_91(val, _values, result)
     return binary val[0], val[2], 'moduloOf:' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 127)
  def _reduce_92(val, _values, result)
     return binary val[0], val[2], 'isEqualTo:' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_93(val, _values, result)
     return binary val[0], val[2], 'isNotEqualTo:' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_94(val, _values, result)
     return binary val[0], val[2], 'logicalOr:' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_95(val, _values, result)
     return binary val[0], val[2], 'logicalAnd:' 
    result
  end
.,.,

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

module_eval(<<'.,.,', 'parser.racc', 137)
  def _reduce_100(val, _values, result)
     return unary val[1], 'unaryNot' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 138)
  def _reduce_101(val, _values, result)
     return unary val[1], 'unaryPlus' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 139)
  def _reduce_102(val, _values, result)
     return unary val[1], 'unaryMinus' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 140)
  def _reduce_103(val, _values, result)
     return unary val[1], 'unaryComplement' 
    result
  end
.,.,

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

module_eval(<<'.,.,', 'parser.racc', 150)
  def _reduce_111(val, _values, result)
     return n :Float,   val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_112(val, _values, result)
     return n :Integer, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 152)
  def _reduce_113(val, _values, result)
     return n :Nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 153)
  def _reduce_114(val, _values, result)
     return n :True 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 154)
  def _reduce_115(val, _values, result)
     return n :False 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 155)
  def _reduce_116(val, _values, result)
     return n :Self 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 157)
  def _reduce_117(val, _values, result)
     return n :String,  val[0] 
    result
  end
.,.,

# reduce 118 omitted

# reduce 119 omitted

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_120(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_121(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 163)
  def _reduce_122(val, _values, result)
     return n :InterpolatedString, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 164)
  def _reduce_123(val, _values, result)
     val[0].append(val[1]); return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 165)
  def _reduce_124(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_125(val, _values, result)
     return to_string(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 167)
  def _reduce_126(val, _values, result)
     return n :String, '' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 169)
  def _reduce_127(val, _values, result)
     return n :String, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 170)
  def _reduce_128(val, _values, result)
     val[0].append(val[1]); return val[0] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Huia
